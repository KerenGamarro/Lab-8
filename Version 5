/* USER CODE BEGIN Header */
//en este codigo ya funciona un contador
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DEBOUNCE_MS 200
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* Flags y variables globales */
volatile uint8_t startGame = 0;          // seteará la recepción UART ('S')
volatile uint8_t semaforoFinalizado = 0; // 1 cuando semáforo termine
volatile uint8_t contadorJ1 = 0;         // 0..9
volatile uint32_t lastPressJ1 = 0;
volatile uint32_t lastPressJ2 = 0;

/* Flags para enviar mensajes por UART desde el main (no en ISR) */
volatile uint8_t flagSendMsgJ1 = 0;
char uartMsgBuf[64];

uint8_t rxData; // byte recibido por UART (usado con RxIT)

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void iniciarSemaforo(void);
void mostrarContadorJ1(uint8_t valor);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* --- Mostrar contador Jugador 1 (PB8 PB9 PA5 PA6) --- */
void mostrarContadorJ1(uint8_t valor)
{
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (valor & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET); // LSB
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (valor & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (valor & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (valor & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET); // MSB
}

/* --- Rutina del semáforo (bloqueante, 1 s por LED) --- */
void iniciarSemaforo(void)
{
  semaforoFinalizado = 0;

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // semaforo1 (rojo)
  HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  // semaforo2 (amarillo)
  HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);   // semaforo3 (verde)
  HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

  semaforoFinalizado = 1;
}

/* --- Callback UART: se activa al recibir 1 byte por RxIT --- */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2)
  {
    if (rxData == 'S' || rxData == 's')
    {
      startGame = 1; // marcar que llegó la orden de iniciar
    }
    // rearmar recepción por interrupción
    HAL_UART_Receive_IT(&huart2, &rxData, 1);
  }
}

/* --- Callback EXTI para botones (se ejecuta en contexto de ISR) --- */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  uint32_t now = HAL_GetTick();

  if (GPIO_Pin == GPIO_PIN_0) // Botón Jugador 1 (PA0)
  {
    // bloquear hasta que termine el semáforo
    if (!semaforoFinalizado) return;

    // antirrebote por software
    if (now - lastPressJ1 < DEBOUNCE_MS) return;
    lastPressJ1 = now;

    // actualizar contador (0..9)
    contadorJ1 = (contadorJ1 + 1) % 10;
    mostrarContadorJ1(contadorJ1);

    // indicar que se debe enviar mensaje por UART desde el main
    snprintf(uartMsgBuf, sizeof(uartMsgBuf), "Jugador1: %d\r\n", contadorJ1);
    flagSendMsgJ1 = 1;
  }
  else if (GPIO_Pin == GPIO_PIN_1) // Botón Jugador 2 (PA1) - listo para usar en Parte C
  {
    if (!semaforoFinalizado) return;
    if (now - lastPressJ2 < DEBOUNCE_MS) return;
    lastPressJ2 = now;
    // por ahora no se hace más (puedes implementar contadorJ2)
    snprintf(uartMsgBuf, sizeof(uartMsgBuf), "Jugador2 pulsado (pendiente Parte C)\r\n");
    flagSendMsgJ1 = 1; // usamos misma flag para enviar texto desde main
  }
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  /* Mensaje inicial y arrancar recepción UART en modo interrupción */
    const char *welcome = "Esperando 'S' por UART para iniciar... \r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)welcome, strlen(welcome), HAL_MAX_DELAY);

    /* arrancar recepción de 1 byte por IT (callback HAL_UART_RxCpltCallback) */
    HAL_UART_Receive_IT(&huart2, &rxData, 1);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Si la ISR de UART marcó startGame, llamamos al semáforo (bloqueante) */
	      if (startGame)
	      {
	        startGame = 0;
	        iniciarSemaforo();

	        /* informar por UART que empezó el juego */
	        const char *msg = "Semaforo completado - Juego activo. Botones habilitados.\r\n";
	        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 200);
	      }

	      /* Enviar mensajes que se generaron en ISR (evita usar UART en ISR) */
	      if (flagSendMsgJ1)
	      {
	        flagSendMsgJ1 = 0;
	        HAL_UART_Transmit(&huart2, (uint8_t *)uartMsgBuf, strlen(uartMsgBuf), 200);
	      }

	      /* Aquí podrías añadir lógica extra (chequear ganador, reinicios, etc.) */

	      /* Pequeña pausa para no bloquear al sistema */
	      HAL_Delay(1);
	    }
}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, contador13_Pin|contador14_Pin|contador21_Pin|semaforo1_Pin
                          |contador24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, semaforo2_Pin|semaforo3_Pin|contador22_Pin|contador11_Pin
                          |contador12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(contador23_GPIO_Port, contador23_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : boton1_Pin boton2_Pin */
  GPIO_InitStruct.Pin = boton1_Pin|boton2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : contador13_Pin contador14_Pin contador21_Pin semaforo1_Pin
                           contador24_Pin */
  GPIO_InitStruct.Pin = contador13_Pin|contador14_Pin|contador21_Pin|semaforo1_Pin
                          |contador24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : semaforo2_Pin semaforo3_Pin contador22_Pin contador11_Pin
                           contador12_Pin */
  GPIO_InitStruct.Pin = semaforo2_Pin|semaforo3_Pin|contador22_Pin|contador11_Pin
                          |contador12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : contador23_Pin */
  GPIO_InitStruct.Pin = contador23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(contador23_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
