/* USER CODE BEGIN Header Keren Gamarro 23546 Juego de carreritas*/
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  ******************************************************************************/
#include "main.h" //bibliotecas necesarias para que funcione
#include <string.h>
#include <stdio.h>

#define DEBOUNCE_MS 200 //antirebote
#define MAX_DECADA 3 // 0..3 = 4 decadas cuantas decadas como maximo puede avanzar
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
volatile uint8_t startGame = 0; //variables volatiles para que se consuman y cambien
volatile uint8_t semaforoFinalizado = 0;
volatile uint8_t juegoActivo = 0; // 1 cuando semáforo terminó y contadores pueden incrementarse

volatile uint8_t contadorJ1 = 0; // 4 decadas
volatile uint8_t contadorJ2 = 0; // 4 decadas
volatile uint32_t lastPressJ1 = 0;
volatile uint32_t lastPressJ2 = 0;

volatile uint8_t flagSendMsg = 0;
char uartMsgBuf[64];

uint8_t rxData;

uint8_t flagGanador = 0;    //  indica si ya hay ganador


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void iniciarSemaforo(void); //funciones para que funcione, una para iniciar el semaforo, los contadores y reiniciar el juego al mandarle el comando s
void mostrarContadorJ1(uint8_t decada);
void mostrarContadorJ2(uint8_t decada);
void reiniciarJuego(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* --- Mostrar contador Jugador 1 --- */
void mostrarContadorJ1(uint8_t decada) //los leds inician apagados y luego se lista los casos del contador
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);

    switch(decada)
    {
        case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); break;
        case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); break;
        case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); break;
        case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); break;
    }
}

/* --- Mostrar contador Jugador 2 --- */ 
void mostrarContadorJ2(uint8_t decada) //lo mismo aqui
{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

    switch(decada)
    {
        case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); break;
        case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); break;
        case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); break;
        case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); break;
    }
}


/* --- Reinicia contadores y flags para volver a empezar --- */
void reiniciarJuego(void)
{
    juegoActivo = 0;
    contadorJ1 = 0;
    contadorJ2 = 0;
    lastPressJ1 = 0;
    lastPressJ2 = 0;

    const char *msg = "Juego reiniciado. Presiona 'S' para iniciar semáforo.\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

/* --- Semáforo (bloqueante) --- */
void iniciarSemaforo(void) //funcion para que se inicie el semaforo 
{
    semaforoFinalizado = 0;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Rojo
    HAL_Delay(1000); //tiempo entre cada uno para que se apaguen y reinicien
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // Amarillo
    HAL_Delay(1000);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Verde
    HAL_Delay(1000);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

    semaforoFinalizado = 1;
    juegoActivo = 1; // activar contadores

    // Mostrar LEDs de la primera década *hasta aquí*, después del semáforo
    mostrarContadorJ1(contadorJ1);
    mostrarContadorJ2(contadorJ2);

}
void verificarGanador(void)
{
    if (flagGanador) return; // ya hay ganador

    if (contadorJ1 >= 4)
    {
        flagGanador = 1;
        juegoActivo = 0;  // bloquear botones
        HAL_UART_Transmit(&huart2, (uint8_t *)"JUGADOR 1 GANA\r\n", 17, HAL_MAX_DELAY);
    }
    else if (contadorJ2 >= 4)
    {
        flagGanador = 1;
        juegoActivo = 0;  // bloquear botones
        HAL_UART_Transmit(&huart2, (uint8_t *)"JUGADOR 2 GANA\r\n", 17, HAL_MAX_DELAY);
    }
}



/* --- Callback UART --- */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART2)
    {
        if(rxData == 'S' || rxData == 's')
        {
            startGame = 1;
        }
        HAL_UART_Receive_IT(&huart2, &rxData, 1); // rearmar interrupción
    }
}

/* --- Callback botones --- */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    uint32_t now = HAL_GetTick();
    if(!juegoActivo) return; // solo cuando semaforo terminó

    // --- Jugador 1 ---
    if(GPIO_Pin == GPIO_PIN_0 && (now - lastPressJ1) > DEBOUNCE_MS)
    {
        lastPressJ1 = now;
        if(contadorJ1 < MAX_DECADA)
        {
            contadorJ1++;
            mostrarContadorJ1(contadorJ1);
            snprintf(uartMsgBuf, sizeof(uartMsgBuf), "Jugador1: decada %d\r\n", contadorJ1);
            flagSendMsg = 1;
        }
        if(contadorJ1 >= MAX_DECADA) juegoActivo = 0; // detener juego
    }

    // --- Jugador 2 ---
    if(GPIO_Pin == GPIO_PIN_1 && (now - lastPressJ2) > DEBOUNCE_MS)
    {
        lastPressJ2 = now;
        if(contadorJ2 < MAX_DECADA)
        {
            contadorJ2++;
            mostrarContadorJ2(contadorJ2);
            snprintf(uartMsgBuf, sizeof(uartMsgBuf), "Jugador2: decada %d\r\n", contadorJ2);
            flagSendMsg = 1;
        }
        if(contadorJ2 >= MAX_DECADA) juegoActivo = 0; // detener juego
    }

    // Cuando se detiene el juego, aviso por UART
    if(!juegoActivo)
    {
        const char *msg = "Contadores completos! Reinicia con 'S'.\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }

    verificarGanador();

}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();

    /* Mensaje inicial */
    const char *welcome = "Esperando 'S' por UART para iniciar... \r\n";
    HAL_UART_Transmit(&huart2, (uint8_t*)welcome, strlen(welcome), HAL_MAX_DELAY);

    HAL_UART_Receive_IT(&huart2, &rxData, 1); // iniciar recepción UART por interrupción

    while(1)
    {
        if(startGame)
        {
            startGame = 0;
            reiniciarJuego();    // limpiar contadores
            iniciarSemaforo();   // semáforo bloqueante
            const char *msg = "Semaforo completado - Juego activo. Botones habilitados.\r\n";
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        }

        if(flagSendMsg)
        {
            flagSendMsg = 0;
            HAL_UART_Transmit(&huart2, (uint8_t*)uartMsgBuf, strlen(uartMsgBuf), HAL_MAX_DELAY);
        }

        HAL_Delay(1);
    }
}


//Aquu termina
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, contador13_Pin|contador14_Pin|contador21_Pin|semaforo1_Pin
                          |contador24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, semaforo2_Pin|semaforo3_Pin|contador22_Pin|contador11_Pin
                          |contador12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(contador23_GPIO_Port, contador23_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : boton1_Pin boton2_Pin */
  GPIO_InitStruct.Pin = boton1_Pin|boton2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : contador13_Pin contador14_Pin contador21_Pin semaforo1_Pin
                           contador24_Pin */
  GPIO_InitStruct.Pin = contador13_Pin|contador14_Pin|contador21_Pin|semaforo1_Pin
                          |contador24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : semaforo2_Pin semaforo3_Pin contador22_Pin contador11_Pin
                           contador12_Pin */
  GPIO_InitStruct.Pin = semaforo2_Pin|semaforo3_Pin|contador22_Pin|contador11_Pin
                          |contador12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : contador23_Pin */
  GPIO_InitStruct.Pin = contador23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(contador23_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
